lettcode 1209
Question:

You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.

 

Example 1:

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.
Example 2:

Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"
Example 3:

Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"
 
 Solution:

 class Solution {
public:
    string removeDuplicates(string s, int k) {
        // stack of {character, count}
        stack<pair<char, int>> st;

        for (char c : s) {
            if (!st.empty() && st.top().first == c) {
                st.top().second++; // increase count
                if (st.top().second == k) {
                    st.pop(); // remove when count == k
                }
            } else {
                st.push({c, 1});
            }
        }

        // rebuild result
        string result = "";
        while (!st.empty()) {
            result.append(st.top().second, st.top().first);
            st.pop();
        }

        reverse(result.begin(), result.end());
        return result;
    }
};
